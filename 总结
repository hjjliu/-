# Redis #
数据类型 string,  list ,set, hash, sort set
过期机制:使用expire设置存活时间(ttl:time to live)
        命令:expire key ttl(单位秒)    设置过期
             ttl key     返回键的剩余时间 单位秒  过期时返回-1
             persist key  取消过期时间 成功返回1 失败0
设置允许连接 bind   设置密码 requirepass
支持事务  但事务不能回滚 multi开 exec关 watch监控
持久化机制 RDB快照 AOF只追加
redis主从复制(读写分离)  从库加命令: slaveof 主地址 主端口
          原理:从数据库启动发sync命令给主数据库,主保存快照,缓存下来,完成后发给从,从载入文件进行缓存(复制初始化) 主每次收到命令就会同步给从,保证数据的一致性(复制同步阶段)
          乐观复制:允许在一段时间内主从内容是不同的,但是最终会保持一致.  会先返回给客户端,不会等待从收到命令(相当于异步).
          图结构:从数据库不仅可以接收主数据库的数据，同时也可以作为主数据库存在.

# 集群 #
## zookeeper集群 ##
leader选举:某个节点获得超过半数以上的节点的投票，则该节点就是leader节点了  
记得设置集群服务ip 投票选举id  dubbo上面链接的时候就写上集群所有节点的ip地址
## solr集群 ##
SolrCloud:基于solr和zookeeper的分布式搜索方案,主要思想是使用zookeeper作为集群的配置信息中心.
          特色功能:集中式的配置信息; 自动容错; 近实时搜索; 查询时自动负载均衡.
## redis ##
redis-cluster:所有的 redis 节点彼此互联(PING-PONG 机制),内部使用二进制协议优化传输速度和带宽.
          分布式存储机制-槽:node slot[0-16383哈希槽] value(key使用crc16算法,结果对16384取余)
          容错机制-投票:选举 半数以上master节点与故障节点通信超过,认为该节点故障,自动触发故障转移操作.故障节点对应的从节点自动升级为主节点.
主从复制+哨兵机制sentinel:主从复制节点是数据节点，哨兵机制部署的节点是监控节点，它们都是redis实例。但是哨兵节点不存储数据，它们监控主从数据节点的状态，若哨兵判定主节点down掉后，就会自动执行上边提到的手工操作的4步。
          判断主节点宕掉:哨兵节点互相通信,半数主观判断宕机,主节点客观下线.其他投票升为主节点.
          步骤:1、启用从节点为主节点。命令：slaveof no one
               2、旧主节点的其他从节点变成新主节点的从节点。命令：slaveof new master
               3、通知应用方redis主节点变成了新主节点。 修改客户端调用的地址并重启客户端。
               4、旧主节点变成新主节点的从节点。  命令：slaveof new master
## mycat ##  
数据库中间件支持mysql集群,提供高可用性数据库分片集群.
     分片:逻辑库 逻辑表 分片节点 节点主机 分片规则
## nginx ##
高性能的http服务器/反向代理服务器以及电子邮件代理服务器
keepalived 是集群管理中保证集群高可用的一个服务软件，用来防止单点故障。
